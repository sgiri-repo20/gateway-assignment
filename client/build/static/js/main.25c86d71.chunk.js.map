{"version":3,"sources":["logo.svg","components/wallet-list.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ItemSearch","useState","loading","setLoading","items","setItems","item","setItem","useEffect","axios","get","then","response","data","catch","error","useMemo","type","name","class","autoComplete","placeholder","onChange","e","target","value","map","key","_id","App","className","to","path","exact","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,oMCuE1BC,EApEE,WAAO,IAAD,EACSC,oBAAS,GADlB,mBACdC,EADc,KACLC,EADK,OAEKF,mBAAS,IAFd,mBAEdG,EAFc,KAEPC,EAFO,OAGGJ,mBAAS,IAHZ,mBAGdK,EAHc,KAGRC,EAHQ,KA2CrB,OApBAC,qBAAU,WACRL,GAAW,GACKM,IAAMC,IAAN,kDAC6BJ,IAG1CK,MAAK,SAAAC,GACJT,GAAW,GACXE,EAASO,EAASC,SAGnBC,OAAM,SAAAC,GACLZ,GAAW,QAMf,CAACG,IAEIU,mBAAQ,WACX,OACE,8BACE,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,MAAM,eAAeC,aAAa,MAAMC,YAAY,SAASC,SAAU,SAAAC,GAAC,OAAIhB,EAAQgB,EAAEC,OAAOC,UAE3HvB,GAAW,yCACZ,sCACCE,GACC,6BAEE,4BAEIA,EAAMsB,KAAI,SAACpB,GACX,OAAO,wBAAIqB,IAAKrB,EAAKsB,KAAMtB,EAAKA,cAQ9C,CAACF,EAAMC,KC9BEwB,E,uKAzBX,OACE,yBAAKC,UAAU,aACb,kBAAC,IAAD,KACA,yBAAKA,UAAU,iDAEX,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,gBAAvB,cACA,yBAAKA,UAAU,yBACb,wBAAIA,UAAU,sBACZ,wBAAIA,UAAU,eACZ,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,YAAvB,cAOR,kBAAC,IAAD,CAAOE,KAAK,IAAIC,OAAK,EAACC,UAAWlC,U,GAlBzBmC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAC,GACLoC,QAAQpC,MAAMA,EAAMqC,c","file":"static/js/main.25c86d71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState,useCallback,useEffect,useMemo } from 'react';\nimport axios from 'axios';\n\nconst ItemSearch = () => {\n    const [loading, setLoading] = useState(false);\n    const [items, setItems] = useState([]);\n    const [item, setItem] = useState('');\n  \n    \n    // const apiCall = useCallback((event) => {\n    //   const request = axios.get(\n    //     `http://localhost:4000/gateway-test/list/${item}`\n    //   );\n    //   request\n    //     .then(response => {\n    //       setLoading(false);\n    //       setItems(response.data);\n    //       //setItems(response.data.filter(c => c.id !== id));\n    //     })\n    //     .catch(error => {\n    //       setLoading(false);\n          \n    //     });\n        \n    // },[item]);\n\n    useEffect(() => {\n      setLoading(true);\n      const request = axios.get(\n        `http://localhost:4000/gateway-test/list/${item}`\n      );\n      request\n        .then(response => {\n          setLoading(false);\n          setItems(response.data);\n          //setItems(response.data.filter(c => c.id !== id));\n        })\n        .catch(error => {\n          setLoading(false);\n          \n        });\n      \n        \n        \n    },[item])\n\n    return useMemo(() => {\n        return (\n          <form>\n            <input type=\"text\" name=\"item\" class=\"form-control\" autoComplete=\"off\" placeholder=\"Search\" onChange={e => setItem(e.target.value)} />\n                 \n            {loading && <p>Loading...</p>}\n            <h1>Result</h1>\n            {items && (\n              <div>\n                \n                <ul>\n                  {\n                    items.map((item) => {\n                    return(<li key={item._id}>{item.item}</li>)\n                    })\n                  }\n                </ul>\n              </div>\n            )}\n          </form>\n        );\n    },[items,setItems])   \n    \n  };\n\n  export default ItemSearch;","import React, {Component} from 'react';\nimport { BrowserRouter as Router, Link, Route } from 'react-router-dom';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\nimport ItemSearch from './components/wallet-list.component';\n\n\n\nclass App extends Component{\n  render(){\n    return(\n      <div className=\"container\">\n        <Router>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            \n            <Link to=\"/\" className=\"navbar-brand\">Search App</Link>\n            <div className=\"collpase nav-collapse\">\n              <ul className=\"navbar-nav mr-auto\">\n                <li className=\"navbar-item\">\n                  <Link to=\"/\" className=\"nav-link\">Search</Link>\n                </li>\n                \n              </ul>\n            </div>\n        </nav>\n        \n          <Route path=\"/\" exact component={ItemSearch} />\n          \n        </Router>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}